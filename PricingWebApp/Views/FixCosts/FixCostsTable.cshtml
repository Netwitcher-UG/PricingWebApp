@model IEnumerable<FixCosts>
@{
    ViewData["Title"] = "Fix Cost Table";
}


<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">

                @if (Model.Any())
                {
                    <div class="card">

                        <div class="card-header">

                            <div class="w-50">
                               
                                <a id="mybtn" data-toggle="modal" data-target="#addone" 
                               class="" style="text-decoration: none;cursor: pointer;"><i class="bi bi-plus"></i> Add New Fix Cost</a>
                                @await Html.PartialAsync("_NewFixCost", new FixCosts())
                            </div>

                        </div>
                        <!-- /.card-header -->
                        <div class="card-body" id="fixCostsTable">
                            <table id="example1" class="table table-bordered table-striped responsive-table">
                                <thead>
                                    <tr>
                                        <th>Fix Cost Name</th>
                                        <th>Monthly Cost</th>
                                        <th>Date of Update</th>
                                        <th>Edit</th>
                                        <th>Delete</th>
                                    </tr>
                                </thead>
                                <tbody id="myFixCostsTbody">
                                    @foreach (var fixcost in Model)
                                    {
                                        try
                                        {
                                            <tr>
                                                <td>
                                                    @fixcost.Title
                                                </td>
                                                <td class="myMonthlyCostTds">
                                                    
                                                    @fixcost.MonthlyCost  
                                                </td>
                                                <td>
                                                    @fixcost.LastUpdate.ToString("dd-MM-yyyy")
                                                </td>
                                                <td >
                                                    <a data-url='@Url.Action($"_EditFixCost/{fixcost.Id}")'
                                           id="edit+@fixcost.Id" data-toggle="modal"
                                           data-target='#EditOne-@fixcost.Id' class="btn btn-success text-center " onclick="KnowMyEditBoxID(this.id)"><i class="bi bi-eye"></i> Edit</a>
                                                    @await Html.PartialAsync("_EditFixCost", fixcost)
                                                </td>

                                                <td >
                                                    <a data-url='@Url.Action($"_DeleteFixCost/{fixcost.Id}")'
                                           id="delete+@fixcost.Id" data-toggle="modal"
                                           data-target='#DeleteOne-@fixcost.Id' class="btn btn-danger text-left"><i class="bi bi-trash"></i> Delete</a>
                                                    @await Html.PartialAsync("_DeleteFixCost", fixcost)
                                                </td>

                                            </tr>
                                        }
                                        catch (Exception ex)
                                        {
                                            <partial>@ex.Message</partial>
                                        }
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <th>Fix Cost Name</th>
                                        <th>Monthly Cost</th>
                                        <th>Date of Update</th>
                                        <th>Edit</th>
                                        <th>Delete</th>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                        <!-- /.card-body -->
                    </div>

                }
                else
                {
                    <div class=" ">
                        <a id="mybtn" data-toggle="modal" data-target="#addone"
                       class="" style="text-decoration: none;cursor: pointer;"><i class="bi bi-plus"></i> Add New Fix Cost</a>
                        @await Html.PartialAsync("_NewFixCost", new FixCosts())
                        <p class="font-weight-bold text-center mt-5">No fix costs . Let's add a fix cost ...</p>
                    </div>
                }
                <!-- /.card -->
            </div>
            <!-- /.col -->
        </div>
        <!-- /.row -->
    </div>
    <!-- /.container-fluid -->
</section>

<!-- Control Sidebar -->
<aside class="control-sidebar control-sidebar-dark">
    <!-- Control sidebar content goes here -->
</aside>

<script>
    var myEditID;
    var formE;
    var myfixcostname;
    var mycost;
    function KnowMyEditBoxID(x) {
        myEditID = x.slice(5);
        formE = document.querySelector('form[name="EditFixCost-' + myEditID + '"]');
        myfixcostname = formE.querySelector('input[name="Title"]').value;
        mycost = formE.querySelector('input[name="MonthlyCost"]').value;

        


    }
    function isEmptyFieldsEdit() {
        const titleInputE = formE.querySelector('input[name="Title"]');
        const monthlyCostInputE = formE.querySelector('input[name="MonthlyCost"]');
        const titleInputerrE = formE.querySelector('span[data-valmsg-for="Title"]');
        const monthlyCostInputerrE = formE.querySelector('span[data-valmsg-for="MonthlyCost"]');
        if (titleInputE.value == "") {
            monthlyCostInputerrE.textContent = "";
            titleInputerrE.textContent = "You must put a name for the cost!!";
            return false;
        } else {
            titleInputerrE.textContent = "";
            if (monthlyCostInputE.value == null || monthlyCostInputE.value == 0) {
                monthlyCostInputerrE.textContent = "You must put a cost!!";
                return false;
            } else {
                monthlyCostInputerrE.textContent = "";
                return true;
            }
        };
    }
    function clearAllErrMsgEdit() {
        const titleInputE = formE.querySelector('input[name="Title"]');
        const monthlyCostInputE = formE.querySelector('input[name="MonthlyCost"]');
        const titleInputerrE = formE.querySelector('span[data-valmsg-for="Title"]');
        const monthlyCostInputerrE = formE.querySelector('span[data-valmsg-for="MonthlyCost"]');
        titleInputE.value = myfixcostname;
        monthlyCostInputE.value = mycost;
        titleInputerrE.textContent = "";
        monthlyCostInputerrE.textContent = "";
    }
</script>
<script>
    function checksaved(x,n){
        setTimeout(function () {
            if (n == true) { toastr.success(x); }
            else { toastr.error(x) }
        }, 1000);
    }
</script>

@if (TempData["Successaddnewfixcost"] != null ){
    <script>checksaved('Added successfully',true);</script>
}
@if(TempData["Filseaddnewfixcost"] != null){
    <script>checksaved('Add failed',false) </script>
}
@if (TempData["Successeditfixcost"] != null){
    <script>checksaved('Update successfully', true);</script>
}
@if (TempData["Filseditfixcost"] != null){
    <script>checksaved('Update failed', false)</script>
}



<script>
        
     const myTableBtnShowMore = document.querySelector('#myFixCostsTbody tr > td:first-child');
     const myTbody = document.querySelector('#myFixCostsTbody');

     function changeMyMonthlyCost(){
        const myMonthlyCost = myTbody.querySelectorAll(".myMonthlyCostTds");
       myMonthlyCost.forEach(function(elm) {
           const x = new Intl.NumberFormat('de-DE', {
                style: 'currency',
                currency: 'EUR',
            }).formatToParts(elm.textContent).map(
                p => p.type != 'literal' && p.type != 'currency' ? p.value : ''
            ).join('')
            elm.textContent = x + " â‚¬";
        });
     }
        
     function countCulomn(){
         let visibleColumnsCount = 0;
         const firstRow = myTbody.querySelectorAll('tr');
         const tdsInFirstTr = firstRow[0].querySelectorAll('td');
         tdsInFirstTr.forEach(function(element){
                 if (element.style.display === 'none') {  visibleColumnsCount++;  }
           });        
         return visibleColumnsCount;
     }    
           
     window.addEventListener('load',changMyModalID );
     window.addEventListener('load',changeMyMonthlyCost );
     window.addEventListener('resize',changMyModalID );

    function changMyModalID() {

    const elements = myTbody.querySelectorAll('*');

    const myTrShowMore = myTbody.querySelectorAll("tr.dt-hasChild");
    const firstChildElements = [];
    for (const trElement of myTrShowMore) {
        firstChildElements.push(trElement.querySelector("td"));
    }
    if(firstChildElements.length == 1){
        firstChildElements[0].click();
    }else if(firstChildElements.length > 1){
        location.reload();
    }

    setTimeout(function () {
        elements.forEach(function (element) {
            if (countCulomn() == 1 && element.id) {

                if (element.id.includes("notDelete")) {

                } else if (element.id.slice(0, 6) === 'Delete') {
                    const index = element.id.indexOf("not");
                    if (index !== -1) { return; }
                    element.id = "not" + element.id;
                }
                if (element.id.includes("notEdit")) {
                    element.id = element.id.slice(3, element.id.length);
                }
            } else if (countCulomn() >= 2 && element.id) {
                if (element.id.includes("notDelete") && element.id.includes("notEdit")) {
                } else {
                    if (element.id.includes("notDelete")) {
                    } else if (element.id.slice(0, 6) === 'Delete') {
                        const index = element.id.indexOf("not");
                        if (index !== -1) { return; }
                        element.id = "not" + element.id;
                    }
                    if (element.id.includes("notEdit")) {
                    } else if (element.id.slice(0, 4) === 'Edit') {
                        const index = element.id.indexOf("not");
                        if (index !== -1) { return; }
                        element.id = "not" + element.id;
                    }
                }
            } else if (countCulomn() == 0 && element.id && element.id.includes("not")) {
                if (element.id.includes("notDelete")) {
                    element.id = element.id.slice(3, element.id.length);
                }
                if (element.id.includes("notEdit")) {
                    element.id = element.id.slice(3, element.id.length);
                }
            }
        });
    }, 400);
}
</script>